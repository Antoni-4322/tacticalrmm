version: "3.7"

# networks
networks:
  proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  api-db:
  redis:
  mesh-db:

# docker managed persistent volumes
volumes:
  tactical_data:
  salt_data:
  postgres_data:
  mongo_data:

services:
  # postgres database for api service
  tactical-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: tacticalrmm
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api-db

  # redis container for celery tasks
  tactical-redis:
    image: redis
    networks:
      - redis

  tactical-init:
    image: ${IMAGE_REPO}:tactical-${VERSION}
    restart: on-failure
    command: ["tactical-init"]
    environment:
      POSTGRES_DB: tacticalrmm
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_HOST: ${MESH_HOST}
    depends_on:
      - tactical-postgres
      - tactical-meshcentral    
    networks:
      - api-db
      - proxy
    volumes:
      - tacticalrmm:/opt/tactical

  # salt master and api
  tactical-salt:
    image: {IMAGE_REPO}:tactical-salt-${VERSION}
    restart: always
    ports:
      - "4505:4505"
      - "4506:4506"
    volumes:
      - tacticalrmm:/opt/tactical
      - salt_data:/etc/salt
    networks:
      - proxy

  # MeshCentral Container
  tactical-meshcentral:
    image: ${IMAGE_REPO}:tactical-meshcentral-${VERSION}
    restart: always
    networks:
      - proxy
      - mesh-db
    volumes:
      - tacticalrmm:/opt/tactical
    depends_on:
      - tactical-mongodb

  # MongoDB Container for MeshCentral
  tactical-mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: meshcentral
    networks:
      - mesh-db
    volumes:
      - mongo_data:/data

  # Container that hosts Vue frontend
  tactical-frontend:
    image: ${IMAGE_REPO}:tactical-frontend-${VERSION}
    command: exec /usr/sbin/nginx -g 'daemon off;'
    restart: always
    environment:
      - APP_HOST=${APP_HOST}
      - API_HOST=${API_HOST}
    volumes:
      - tactical_data:/opt/tactical
    ports:
      - "80:80"
      - "443:443"
    networks:
      proxy:
        ipv4_address: 172.20.0.20

  # Container for Django backend
  tactical-backend:
    image: ${IMAGE_REPO}:tactical-${VERSION}
    command: ["tactical-backend"]
    restart: always
    environment:
      - APP_HOST=${APP_HOST}
      - API_HOST=${API_HOST}
      - MESH_HOST=${MESH_HOST}
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-meshcentral

  tactical-nginx:
  # Container for tactical proxy
    image: ${IMAGE_REPO}:tactical-${VERSION}
    command: ["tactical-nginx"]
    restart: always
    environment:
      - APP_HOST=${APP_HOST}
      - API_HOST=${API_HOST}
      - MESH_HOST=${MESH_HOST}
    networks:
      - proxy
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-meshcentral

  # container for celery worker service
  tactical-celery:
    image: ${IMAGE_REPO}:tactical-${VERSION}
    command: ["tactical-celery"]
    restart: always
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-redis

  # container for celery beat service
  tactical-celerybeat:
    image: ${IMAGE_REPO}:tactical-${VERSION}
    command: ["tactical-celerybeat"]
    restart: always
    networks:
      - redis
      - api-db
      - database
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-redis

  # container for celery winupdate tasks
  tactical-celerywinupdate:
    image: ${IMAGE_REPO}:tactical-${VERSION}
    command: ["tactical-celerywinupdate"]
    restart: always
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-redis
