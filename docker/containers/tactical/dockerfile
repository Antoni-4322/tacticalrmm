# creates python virtual env
FROM python:alpine AS CREATE_VENV_STAGE

# # set env variables
ENV VIRTUAL_ENV /opt/venv
ENV TACTICAL_DIR /opt/tactical
ENV TACTICAL_TMP_DIR /tmp/tactical
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH "${VIRTUAL_ENV}/bin:$PATH"

COPY api/tacticalrmm/requirements.txt ${TACTICAL_TMP_DIR}/api/requirements.txt

RUN apk add build-base libffi-dev postgresql-dev && \
    pip install --upgrade pip && \
    pip install --no-cache-dir setuptools wheel gunicorn && \
    sed -i '/uWSGI/d' ${TACTICAL_TMP_DIR}/api/requirements.txt && \
    pip install --no-cache-dir -r ${TACTICAL_TMP_DIR}/api/requirements.txt


# runtime image
FROM python:alpine

# set env variables
ENV VIRTUAL_ENV /opt/venv
ENV TACTICAL_DIR /opt/tactical
ENV TACTICAL_TMP_DIR /tmp/tactical
ENV TACTICAL_GO_DIR /usr/local/rmmgo
ENV TACTICAL_READY_FILE ${TACTICAL_DIR}/tmp/tactical.ready
ENV TACTICAL_USER tactical
ENV PATH "${VIRTUAL_ENV}/bin:${TACTICAL_GO_DIR}/go/bin:$PATH"

# copy files from repo
COPY api/tacticalrmm ${TACTICAL_TMP_DIR}/api
COPY scripts ${TACTICAL_TMP_DIR}/scripts
COPY _modules ${TACTICAL_TMP_DIR}/_modules

# copy go install from build stage
COPY --from=golang:1.15-alpine /usr/local/go ${TACTICAL_GO_DIR}/go
COPY --from=CREATE_VENV_STAGE ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# install deps
RUN apk add git && \
    ${TACTICAL_GO_DIR}/go/bin/go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo && \
    addgroup -g 1000 "${TACTICAL_USER}" && \
    adduser --home "${TACTICAL_DIR}" --disabled-password --shell /bin/sh --uid 1000 --ingroup ${TACTICAL_USER} "${TACTICAL_USER}"

# overwrite goversioninfo file
COPY api/tacticalrmm/core/goinstaller/bin/goversioninfo /usr/local/bin/goversioninfo
RUN chmod +x /usr/local/bin/goversioninfo

# docker init
COPY docker/containers/tactical/entrypoint.sh /
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

WORKDIR ${TACTICAL_DIR}/api

EXPOSE 80
